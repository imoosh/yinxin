package config

import (
	"fmt"
	"os"
	"strings"
	"text/template"

	"iotvpn_config_manager_plugin/sslvpn/pkg/defines"
	"iotvpn_config_manager_plugin/sslvpn/pkg/types"
)

// SSLVPNConfigManager 配置管理器,管理json文件加载，并生成openvpn配置文件
type SSLVPNConfigManager struct {
	PluginSSLVPNDir      string
	BackupPath           string
	PluginServerCertPath string
	PluginServerKeyPath  string
	PluginCAath          string
	PluginCRLPath        string
}

// NewConfigManager 创建配置管理器
func NewConfigManager() *SSLVPNConfigManager {
	return &SSLVPNConfigManager{
		PluginSSLVPNDir:      defines.SSLVPNDir,
		BackupPath:           defines.OpenVPNMainPath + ".backup",
		PluginServerCertPath: defines.CommonServerCertPath,
		PluginServerKeyPath:  defines.CommonServerKeyPath,
		PluginCAath:          defines.CommonCACertPath,
		PluginCRLPath:        defines.CommonCRLPath,
	}
}

// OpenVPN配置文件模板
const openVPNConfigTemplate = `# OpenVPN Server Configuration
# Generated by IoT VPN Config Agent

# 基本设置
port {{ .Port }}
proto {{ .Proto }}
dev {{ .Dev }}
dev-type {{ .DevType }}

# 证书和密钥
ca {{ .CA }}
cert {{ .Cert }}
key {{ .Key }}
dh {{ .DH }}

# 服务器网络设置
server {{ .ServerNet }} {{ .ServerMask }}

# 客户端配置
max-clients {{ .MaxClients }}
{{- if .DuplicateCN }}
duplicate-cn
{{- end }}

# 客户端配置目录（CCD）
client-config-dir /etc/openvpn/ccd

# 网络路由
{{- if .PushRouteDefault }}
push "redirect-gateway def1 bypass-dhcp"
{{- end }}
{{- range .PushRoute }}
push "route {{ .Net }} {{ .Mask }}"
{{- end }}

# DNS设置
{{- if .PushDNS }}
push "dhcp-option DNS {{ .PushDNS }}"
{{- end }}

# 加密设置
{{- if .DataCiphers }}
data-ciphers {{ join .DataCiphers ":" }}
{{- end }}
{{- if .Cipher }}
cipher {{ .Cipher }}
{{- end }}
{{- if .Auth }}
auth {{ .Auth }}
{{- end }}

# TLS设置
{{- if .TLSAuth }}
tls-auth {{ .TLSAuth }} 0
{{- end }}
{{- if .TLSCrypt }}
tls-crypt {{ .TLSCrypt }}
{{- end }}

# 其他设置
verb {{ .Verb }}
explicit-exit-notify {{ .ExplicitExitNotify }}

# 用户权限
{{- if .Username }}
username-as-common-name
{{- end }}

# 客户端证书验证
{{- if .CRL }}
crl-verify {{ .CRL }}
{{- end }}

# 状态和日志
status /var/log/openvpn/openvpn-status.log
log /var/log/openvpn/openvpn.log
log-append /var/log/openvpn/openvpn.log

# 保持连接
keepalive 10 120
persist-key
persist-tun

# 压缩
{{- if .Compress }}
compress {{ .Compress }}
{{- end }}

# 管理接口
management localhost 7505
`

// ConfigTemplate 配置模板数据
type ConfigTemplate struct {
	Port       int
	Proto      string
	Dev        string
	DevType    string
	CA         string
	Cert       string
	Key        string
	DH         string
	ServerNet  string
	ServerMask string

	MaxClients         int
	DuplicateCN        bool
	PushRouteDefault   bool
	PushRoute          []types.RouteConfig
	PushDNS            string
	DataCiphers        []string
	Cipher             string
	Auth               string
	TLSAuth            string
	TLSCrypt           string
	Verb               int
	ExplicitExitNotify int
	Username           bool
	CRL                string
	Compress           string
}

// GenerateDefaultConfig 生成默认配置
func (cm *SSLVPNConfigManager) GenerateDefaultConfig() (*types.VPNConfig, error) {

	// 生成默认配置
	defaultConfig := &types.VPNConfig{
		Port:             1194,
		MaxClients:       100,
		Verb:             3,
		DataCiphers:      []string{"AES-256-GCM", "AES-128-GCM", "AES-256-CBC"},
		PushDNS:          "8.8.8.8",
		PushRouteDefault: false,
		PushRoute: []types.RouteConfig{
			{
				Net:  "10.8.0.0",
				Mask: "255.255.255.0",
			},
		},
		ServerNet: types.ServerNet{
			Net:  "10.8.0.0",
			Mask: "255.255.255.0",
		},
	}

	// 生成 openvpn 配置文件 TODO

	return defaultConfig, nil
}

// generateConfigContent 生成配置文件内容
func (cm *SSLVPNConfigManager) generateConfigContent(config *types.VPNConfig) (string, error) {
	// 准备模板数据，使用固定的证书路径
	templateData := ConfigTemplate{
		Port:       config.Port,
		Proto:      "tcp",
		Dev:        "tun0",
		DevType:    "tun",
		CA:         defines.CommonCACertPath,     // 固定CA路径
		Cert:       defines.CommonServerCertPath, // 固定服务器证书路径
		Key:        defines.CommonServerKeyPath,  // 固定服务器私钥路径
		ServerNet:  config.ServerNet.Net,
		ServerMask: config.ServerNet.Mask,

		MaxClients:         config.MaxClients,
		DuplicateCN:        false,
		PushRouteDefault:   config.PushRouteDefault,
		PushRoute:          config.PushRoute,
		PushDNS:            config.PushDNS,
		DataCiphers:        config.DataCiphers,
		Cipher:             "AES-256-GCM",
		Auth:               "SHA256",
		TLSCrypt:           "",
		Verb:               config.Verb,
		ExplicitExitNotify: 1,
		Username:           false,
		CRL:                defines.CommonCRLPath, // 固定CRL路径
		Compress:           "lz4",
	}

	// 创建模板函数
	funcMap := template.FuncMap{
		"join": strings.Join,
	}

	// 解析模板
	tmpl, err := template.New("openvpn").Funcs(funcMap).Parse(openVPNConfigTemplate)
	if err != nil {
		return "", fmt.Errorf("failed to parse template: %v", err)
	}

	// 执行模板
	var buf strings.Builder
	if err := tmpl.Execute(&buf, templateData); err != nil {
		return "", fmt.Errorf("failed to execute template: %v", err)
	}

	return buf.String(), nil
}

// GenOpenVPNConfFile 生成openvpn配置文件
func (cm *SSLVPNConfigManager) GenOpenVPNConfFile(config *types.VPNConfig) error {
	content, err := cm.generateConfigContent(config)
	if err != nil {
		return fmt.Errorf("failed to generate config content: %v", err)
	}

	return os.WriteFile(defines.OpenVPNMainPath, []byte(content), 0644)
}
